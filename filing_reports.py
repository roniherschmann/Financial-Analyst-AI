# Author: Roni Herschmann
# filing_reports.py
import os
from pathlib import Path

import weave
from openai import OpenAI
from docx import Document
from pptx import Presentation
from pptx.util import Inches

# Import your summarization function from filing_summary.py
from filing_summary import summarize_filing

# Initialize OpenAI client (ensure OPENAI_API_KEY is exported)
client = OpenAI()

# ──────────────────────────────────────────────────────────────────────────────
# 1) Word Report Generation
# ──────────────────────────────────────────────────────────────────────────────
@weave.op()
def generate_word_report(summary: dict, output_path: str) -> str:
    """
    Given a filing summary dict (as returned by summarize_filing),
    generate a Word (.docx) report at output_path. Returns the path.
    """
    # Ensure parent directory exists
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # Create a new .docx document
    doc = Document()

    # Title
    doc.add_heading("Financial Filing Analysis", level=0)

    # 1) KPIs Table
    doc.add_heading("Key Performance Indicators", level=1)
    kpis = summary.get("kpis", {})
    if kpis:
        table = doc.add_table(rows=1, cols=2)
        hdr = table.rows[0].cells
        hdr[0].text = "Metric"
        hdr[1].text = "Value"
        for metric, value in kpis.items():
            row_cells = table.add_row().cells
            row_cells[0].text = str(metric)
            row_cells[1].text = str(value)
    else:
        doc.add_paragraph("No KPIs found.")

    # 2) Segment Summaries
    segments = summary.get("segments", {})
    if segments:
        doc.add_heading("Segment Performance", level=1)
        for seg_name, seg_text in segments.items():
            doc.add_heading(seg_name, level=2)
            doc.add_paragraph(seg_text)
    else:
        doc.add_paragraph("No segment data available.")

    # 3) Management Tone & Financial Performance
    tone = summary.get("tone_summary", "")
    perf = summary.get("financial_performance_summary", "")
    if tone:
        doc.add_heading("Management Tone", level=1)
        doc.add_paragraph(tone)
    if perf:
        doc.add_heading("Financial Performance Summary", level=1)
        doc.add_paragraph(perf)

    # 4) Peer Metric Recommendations
    peers = summary.get("peer_metric_recs", "")
    if peers:
        doc.add_heading("Peer Metric Recommendations", level=1)
        doc.add_paragraph(peers)

    # Save the document
    doc.save(output_path)
    return str(output_path)


# ──────────────────────────────────────────────────────────────────────────────
# 2) PowerPoint Report Generation
# ──────────────────────────────────────────────────────────────────────────────
@weave.op()
def generate_pptx_report(summary: dict, output_path: str) -> str:
    """
    Given a filing summary dict, generate a PowerPoint (.pptx) at output_path.
    Returns the path.
    """
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # Create a new Presentation
    prs = Presentation()

    # --- Slide 1: Title Slide ---
    title_slide_layout = prs.slide_layouts[0]  # usually Title & Subtitle
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = "Financial Filing Analysis"
    subtitle.text = "Generated by AI Agent"

    # --- Slide 2: KPIs Table ---
    slide = prs.slides.add_slide(prs.slide_layouts[5])  # a blank slide
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(0.5))
    title_frame = title_box.text_frame
    title_frame.text = "Key Performance Indicators"

    kpis = summary.get("kpis", {})
    if kpis:
        rows = len(kpis) + 1
        cols = 2
        table_left = Inches(0.5)
        table_top = Inches(1.0)
        table_width = Inches(9)
        table_height = Inches(0.8 * rows)
        table = slide.shapes.add_table(rows, cols, table_left, table_top, table_width, table_height).table
        table.columns[0].width = Inches(4)
        table.columns[1].width = Inches(5)
        # Header row
        table.cell(0, 0).text = "Metric"
        table.cell(0, 1).text = "Value"
        # Populate
        for i, (metric, value) in enumerate(kpis.items(), start=1):
            table.cell(i, 0).text = str(metric)
            table.cell(i, 1).text = str(value)
    else:
        # If no KPIs, just write a line
        para = slide.shapes.add_textbox(Inches(0.5), Inches(1.0), Inches(9), Inches(1)).text_frame
        para.text = "No KPIs found."

    # --- Slide 3..N: One slide per segment ---
    segments = summary.get("segments", {})
    if segments:
        for seg_name, seg_text in segments.items():
            slide = prs.slides.add_slide(prs.slide_layouts[1])  # Title + Content layout
            slide.shapes.title.text = f"Segment: {seg_name}"
            body = slide.shapes.placeholders[1].text_frame
            # Break the paragraph into bullet points (split on “. ”)
            for sentence in seg_text.split(". "):
                if sentence.strip():
                    p = body.add_paragraph()
                    p.text = sentence.strip() + ("" if sentence.strip().endswith(".") else ".")
                    p.level = 0
    else:
        # If no segments, add a slide saying so
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        slide.shapes.title.text = "Segment Performance"
        slide.shapes.placeholders[1].text_frame.text = "No segment data available."

    # --- Final Slide: Peer Metric Recommendations ---
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "Peer Metric Recommendations"
    body = slide.shapes.placeholders[1].text_frame
    peers = summary.get("peer_metric_recs", "")
    body.text = peers or "No peer‐metric recommendations."

    # Save
    prs.save(output_path)
    return str(output_path)


# ──────────────────────────────────────────────────────────────────────────────
# 3) Combine Summarization + Report Generation
# ──────────────────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    weave.init("AI-Analyst")  # same W&B project name to track everything

    # 1) Pretend we have raw_text from a real 10-K/10-Q.
    #    You can replace this with actual EDGAR‐fetched text later.
    raw_text = """
    Apple Inc. posted revenue of $260 billion in fiscal 2022, up 8% year-over-year. 
    iPhone revenue grew 10% to $183 billion, services revenue hit $68 billion, 
    and net income was $57 billion. Management’s tone was cautiously optimistic, 
    highlighting supply chain constraints but noting strong demand for new products. 
    Fetch EV/EBITDA for MSFT, GOOGL, AMZN.
    """

    # 2) Summarize (calls your existing Weave‐tracked function)
    summary = summarize_filing(raw_text)

    # 3) Generate Word & PPTX (these are also Weave‐tracked ops!)
    out_dir = Path("./outputs")
    word_path = out_dir / "2022_10K_Analysis.docx"
    pptx_path = out_dir / "2022_10K_Analysis.pptx"

    w_path = generate_word_report(summary, str(word_path))
    p_path = generate_pptx_report(summary, str(pptx_path))

    print(f"Word report saved to: {w_path}")
    print(f"PPTX report saved to: {p_path}")